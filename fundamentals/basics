<!-- Fundamentals: Variables, Data Types, Operators, Control Structures --> 

## Fundamentals of JavaScript

### Overview

Understanding the fundamentals of JavaScript is crucial for mastering the language and preparing for interviews. This section covers the essential concepts, including variables, data types, operators, and control structures.

### Topics Covered

1. **Variables**:
   - Declaration: `var`, `let`, `const`
   - Scope: Global, function, block
   - Hoisting

2. **Data Types**:
   - Primitive Types: `number`, `string`, `boolean`, `null`, `undefined`, `symbol`, `bigint`
   - Reference Types: `object`, `array`, `function`

3. **Operators**:
   - Arithmetic Operators: `+`, `-`, `*`, `/`, `%`
   - Assignment Operators: `=`, `+=`, `-=`, `*=`, `/=`
   - Comparison Operators: `==`, `!=`, `===`, `!==`, `>`, `<`, `>=`, `<=`
   - Logical Operators: `&&`, `||`, `!`
   - Bitwise Operators: `&`, `|`, `^`, `~`, `<<`, `>>`, `>>>`
   - Ternary Operator: `condition ? expr1 : expr2`
   - Type Operators: `typeof`, `instanceof`

4. **Control Structures**:
   - Conditional Statements: `if`, `else if`, `else`, `switch`
   - Loops: `for`, `while`, `do...while`, `for...in`, `for...of`
   - Exception Handling: `try`, `catch`, `finally`, `throw`

### Examples

#### Variables

```javascript
// var: function-scoped
var x = 10;

// let: block-scoped
let y = 20;

// const: block-scoped, immutable
const z = 30;
```

#### Data Types

```javascript
// Primitive Types
let num = 42; // number
let str = "Hello"; // string
let bool = true; // boolean
let nothing = null; // null
let notDefined; // undefined
let symbol = Symbol("id"); // symbol
let bigInt = BigInt(12345678901234567890); // bigint

// Reference Types
let obj = { name: "Alice", age: 25 }; // object
let arr = [1, 2, 3]; // array
let func = function() { return "Hello, world!"; }; // function
```

#### Operators

```javascript
// Arithmetic Operators
let sum = 5 + 3;
let difference = 5 - 3;
let product = 5 * 3;
let quotient = 5 / 3;
let remainder = 5 % 3;

// Comparison Operators
let isEqual = (5 == "5"); // true (loose equality)
let isStrictEqual = (5 === "5"); // false (strict equality)
let isGreater = (5 > 3); // true

// Logical Operators
let and = (true && false); // false
let or = (true || false); // true
let not = !true; // false

// Ternary Operator
let age = 20;
let canVote = (age >= 18) ? "Yes" : "No"; // "Yes"

// Type Operators
let typeOfNum = typeof 42; // "number"
let isInstance = [] instanceof Array; // true
```

#### Control Structures

```javascript
// Conditional Statements
let weather = "rainy";
if (weather === "sunny") {
    console.log("Wear sunglasses");
} else if (weather === "rainy") {
    console.log("Take an umbrella");
} else {
    console.log("Weather is unpredictable");
}

// Switch Statement
let day = 2;
switch (day) {
    case 1:
        console.log("Monday");
        break;
    case 2:
        console.log("Tuesday");
        break;
    default:
        console.log("Unknown day");
}

// Loops
for (let i = 0; i < 5; i++) {
    console.log(i);
}

let count = 0;
while (count < 5) {
    console.log(count);
    count++;
}

do {
    console.log(count);
    count--;
} while (count > 0);

let obj = {a: 1, b: 2, c: 3};
for (let key in obj) {
    console.log(key, obj[key]);
}

let arr = [10, 20, 30];
for (let value of arr) {
    console.log(value);
}

// Exception Handling
try {
    throw new Error("An error occurred");
} catch (error) {
    console.log(error.message);
} finally {
    console.log("This runs regardless of the result");
}
```

### Tips

- **Variable Scope**: Use `let` and `const` to avoid issues with variable hoisting and scope.
- **Strict Equality**: Prefer `===` over `==` to avoid unexpected type coercion.
- **Control Structures**: Use appropriate loops and conditional statements to keep code readable and maintainable.
- **Error Handling**: Always handle exceptions to prevent your application from crashing unexpectedly.

---

Mastering these fundamentals is essential for building a strong foundation in JavaScript and will prepare you for more advanced topics and coding challenges.